/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/response/main';
// codes.ts
declare namespace ns_0 {
  export enum ErrorCodes {
    internalServerError = 500,
    internalError = 500,
    userNotAuthorized = 403,
    userNotAuthorizedOnGroup = 403,
    teacherIsNotDraftCreator = 403,
    teacherNotInOrganization = 403,
    classroomAccessForbidden = 403,
    insufficientPermissions = 403,
    invalidAccess = 404,
    documentNotFound = 404,
    documentNotSaved = 800,
    codeNotFound = 100,
    joinWaitingToConfirm = 101,
    invitationNotValid = 102,
    invitationAlreadyExists = 103,
    userAlreadyExistOnGroup = 104,
    userPendingRequestOnGroup = 105,
    userInvitePendingOnGroup = 106,
    documentAlreadyExist = 107,
    invalidParameters = 108,
    projectNotFound = 109,
    languageNotSupport = 110,
    promptLiteralsNotFound = 111,
    promptDependenciesNotFound = 112,
    promptOptionsNotFound = 113,
    promptDependenciesError = 114,
    promptOptionsError = 115,
    promptIsOptions = 116,
    userAlreadyExists = 117,
    roleNotSupported = 118,
    unauthorizedUserForChat = 119,
    chatNotValid = 120,
    chatWithoutLanguages = 121,
    chatWithoutDefaultLanguage = 122,
    chatWithoutAssociatedProject = 123,
    chatNotHasProjectUrlSet = 124,
    notLanguagesToUpdate = 125,
    llmGenerationError = 126,
    functionExecutionError = 127,
    parsingIPE = 128,
    processingIPE = 129,
    invalidAccessToken = 130,
    insufficientCredits = 131,
    ipeKeyNotDefined = 132,
    mailTemplatesNotDefined = 133,
    mailNotSend = 134,
    invalidToDelete = 135,
    entityNotValid = 136,
    noAdministratorsToNotify = 137,
  }
}


// generator.ts
declare namespace ns_1 {
  import ErrorManager = __beyond_dep_ns_0.ErrorManager;
  import BusinessErrorManager = ns_2.BusinessErrorManager;
  export class ErrorGenerator {
    static internalError(log?: string, message?: string, exc?: Error): BusinessErrorManager;
    static documentNotFound(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static documentNotSaved(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static documentAlreadyExist(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static invalidParameters(parameters: string[]): BusinessErrorManager;
    static projectNotFound(id: string): BusinessErrorManager;
    static userNotAuthorized(): BusinessErrorManager;
    static languageNotSupport(collectionName: string, parameter: string, exc?: Error): BusinessErrorManager;
    static promptOptionsError(error: ErrorManager): BusinessErrorManager;
    static promptDependenciesError(dependency: string, error: ErrorManager): BusinessErrorManager;
    static promptLiteralsNotFound(items: string[]): BusinessErrorManager;
    static promptDependenciesNotFound(): BusinessErrorManager;
    static promptOptionsNotFound(): BusinessErrorManager;
    static userAlreadyExists(id: string, exc?: Error): BusinessErrorManager;
    static roleNotSupported(role: string, exc?: Error): BusinessErrorManager;
    static unauthorizedUserForChat(exc?: Error): BusinessErrorManager;
    static chatNotValid(id: string): BusinessErrorManager;
    static chatWithoutLanguages(id: string): BusinessErrorManager;
    static chatWithoutDefaultLanguage(id: string): BusinessErrorManager;
    static chatWithoutAssociatedProject(id: string): BusinessErrorManager;
    static chatNotHasProjectUrlSet(id: string): BusinessErrorManager;
    static notLanguagesToUpdate(id: string): BusinessErrorManager;
    static promptIsOptions(id: string): BusinessErrorManager;
    static llmGenerationError(exc?: Error): BusinessErrorManager;
    static functionExecutionError(tool: {
      name: string;
    }): BusinessErrorManager;
    static parsingIPE(name: string): BusinessErrorManager;
    static processingIPE(name: string): BusinessErrorManager;
    static invalidAccessToken(): BusinessErrorManager;
    static insufficientCredits(): BusinessErrorManager;
    static ipeKeyNotDefined(): BusinessErrorManager;
    static classroomAccessForbidden(user: string, classroomId: string): BusinessErrorManager;
    static joinWaitingToConfirm(email: string): BusinessErrorManager;
    static invitationAlreadyExists(email: string, entity: string, id: string): BusinessErrorManager;
    static userAlreadyExistOnGroup(email: string, entity: string): BusinessErrorManager;
    static mailTemplatesNotDefined(template: string): BusinessErrorManager;
    static mailNotSend(): BusinessErrorManager;
    static invitationNotValid(email: string, entity: string): BusinessErrorManager;
    static codeNotFound(code: string, entity: string): BusinessErrorManager;
    static userNotAuthorizedOnGroup(group: {
      entity: {
        name: string;
      };
      id: string;
    }): BusinessErrorManager;
    static entityNotValid(entity: string): BusinessErrorManager;
    static noAdministratorsToNotify(): BusinessErrorManager;
    static userPendingRequestOnGroup(userId: string, groupId: string): BusinessErrorManager;
    static userInvitePendingOnGroup(userId: string, groupId: string): BusinessErrorManager;
    static invalidToDelete(collection: string, id: string, entities: string[]): BusinessErrorManager;
  }
}


// manager.ts
declare namespace ns_2 {
  import ErrorManager = __beyond_dep_ns_0.ErrorManager;
  export class BusinessErrorManager extends ErrorManager {
    get is(): string;
  }
}


export import ErrorCodes = ns_0.ErrorCodes;
export import ErrorGenerator = ns_1.ErrorGenerator;
export import BusinessErrorManager = ns_2.BusinessErrorManager;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };