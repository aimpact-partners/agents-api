/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'firebase-admin';
// chats\chat.ts
declare namespace ns_0 {
  import IUserBase = ns_12.IUserBase;
  export interface ILastIterationsData {
    role: string;
    content: string;
    synthesis?: string;
    metadata?: any;
  }
  export interface IChatBase {
    id: string;
    name: string;
    metadata: {};
    parent: string;
    children: string;
    language: {
      default: string;
    };
    user: IUserBase;
    messages?: {
      count: number;
      interactions: number;
      lastTwo?: ILastIterationsData[];
    };
  }
  export interface IChatData extends IChatBase {
    ipe?: Record<string, any>;
    synthesis?: string;
    project: {
      id: string;
      name: string;
      identifier: string;
      agent: string;
    };
    usage?: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
  }
  export interface IChatDataSpecs {
    id: string;
    projectId: string;
    agent: string;
    uid: string;
    name: string;
    metadata: {};
    parent?: string;
    children?: string;
    language: {
      default: string;
    };
    user: IUserBase;
  }
}


// chats\message.ts
declare namespace ns_1 {
  import firestore = __beyond_dep_ns_0.firestore;
  export type RoleType = 'system' | 'user' | 'assistant' | 'function';
  export interface IMessageBase {
    id: string;
    role: RoleType;
    content: string;
    timestamp: number | firestore.FieldValue;
  }
  export interface IMessageData extends IMessageBase {
    chatId: string;
    chat: {
      id: string;
    };
    synthesis?: string;
  }
}


// codes.ts
declare namespace ns_2 {
  /**
   * entity = project
   */
  export interface ICodeBase {
    id: string;
    code: string;
    entity: {
      name: string;
      id: string;
    };
  }
  export interface ICodeData extends ICodeBase {}
}


// common\people.ts
declare namespace ns_3 {
  export type RoleType = 'manager' | 'member';
  export interface IPeopleBase {
    uid?: string;
    id?: string;
    role?: RoleType;
    name: string;
    photoUrl?: string;
  }
  export interface IPeopleData extends IPeopleBase {
    email: string;
    invited?: boolean;
    authorized?: boolean;
    notifications?: boolean;
  }
  export interface IInviteData {
    id: string;
    email: string;
    role?: RoleType;
  }
}


// common\timeStamp.ts
declare namespace ns_4 {
  export interface ITimeStamp {
    timeCreated: number;
    timeUpdated: number;
  }
}


// kb.ts
declare namespace ns_5 {
  export interface IKnowledgeBoxesBase {
    id: string;
    path: string;
    userId: string;
    prompt: string;
    documents: [];
  }
  export interface IKnowledgeBoxesData extends IKnowledgeBoxesBase {}
}


// projects.ts
declare namespace ns_6 {
  import ITimeStamp = ns_4.ITimeStamp;
  import IIPEData = ns_8.IIPEData;
  import IPromptBase = ns_8.IPromptBase;
  export interface IProjectSpecification {
    id: string;
    name: string;
    identifier: string;
  }
  export interface IProjectBase extends IProjectSpecification {
    description: string;
  }
  export interface IProjectData extends IProjectBase {
    agent: {
      url: string;
    };
  }
  export interface IAgentBase extends IPromptBase {
    literals: {
      agent: Record<string, any>;
      ipe: Record<string, any>;
    };
    ipe?: IIPEData[];
  }
  export interface IAgentData extends IAgentBase {}
  export interface IApiKeyBase extends ITimeStamp {
    creator: {
      id: string;
      name: string;
      email: string;
      photoURL: string;
    };
    key: string;
    name: string;
  }
  export interface IApiKeyData {}
}


// prompts\category.ts
declare namespace ns_7 {
  export interface IPromptCategoryBase {
    id: string;
    name: string;
    description: string;
  }
  export interface IPromptCategoryData extends IPromptCategoryBase {
    prompts: Record<string, string>;
    project: {
      id: string;
      name: string;
    };
  }
}


// prompts\index.ts
declare namespace ns_8 {
  export interface IPromptBase {
    model: string;
    temperature: number;
    format: string;
    prompt: {
      category: string;
      name: string;
    };
    language: string;
  }
  export interface IIPEBase extends IPromptBase {}
  export interface IIPEData extends IIPEBase {
    key: string;
    literals: Record<string, any>;
  }
}


// prompts\language.ts
declare namespace ns_9 {
  import IPromptLiterals = ns_10.IPromptLiterals;
  import IProjectSpecification = ns_6.IProjectSpecification;
  export interface IPromptOptionData {
    id: string;
    value: string;
  }
  export interface IPromptLanguageData {
    id: string;
    language: string;
    value?: string;
    schema?: Record<string, any>;
    format: string;
    literals?: IPromptLiterals;
    project: IProjectSpecification;
    options?: IPromptOptionData[];
  }
}


// prompts\template.ts
declare namespace ns_10 {
  import IPromptCategoryData = ns_7.IPromptCategoryData;
  import IPromptOptionData = ns_9.IPromptOptionData;
  import IProjectSpecification = ns_6.IProjectSpecification;
  export interface IPromptLanguage {
    default: string;
    languages: string[];
    updated: string[];
  }
  export interface IPromptLiterals {
    pure?: string[];
    dependencies?: string[];
    metadata?: string[];
  }
  interface IBaseData {
    id: string;
    name: string;
    description?: string;
    format: 'json' | 'text';
    is: 'prompt' | 'function' | 'dependency';
    literals?: IPromptLiterals;
    language: IPromptLanguage;
  }
  export interface IPromptTemplateBase extends IBaseData {
    projectId: string;
    value?: string;
    options?: IPromptOptionData[];
  }
  export interface IPromptTemplateData extends IBaseData {
    identifier: string;
    project: IProjectSpecification;
    categories?: IPromptCategoryData[];
    value?: string;
  }
  export interface IPromptTemplateLanguageData {
    id: string;
    project: IProjectSpecification;
    language: string;
    value?: string;
    literals?: IPromptLiterals;
  }
  export {};
}


// schemas.ts
declare namespace ns_11 {
  export interface ISchemaBase {
    id: string;
  }
  export interface ISchemaData extends ISchemaBase {}
  export interface ISchemaLanguageBase {
    id: string;
  }
  export interface ISchemaLanguageData {
    id: string;
    schema: string;
  }
}


// users.ts
declare namespace ns_12 {
  export interface IUserBase {
    id?: string;
    uid: string;
    name: string;
    email: string;
    photoUrl: string;
    photoURL?: string;
    phoneNumber: number;
    displayName?: string;
  }
  export interface IUserData extends IUserBase {
    firebaseToken: string;
    token: string;
    custom: string;
    createdOn: number;
    lastLogin: number;
  }
}


export import ILastIterationsData = ns_0.ILastIterationsData;
export import IChatBase = ns_0.IChatBase;
export import IChatData = ns_0.IChatData;
export import IChatDataSpecs = ns_0.IChatDataSpecs;
export import RoleType = ns_1.RoleType;
export import IMessageBase = ns_1.IMessageBase;
export import IMessageData = ns_1.IMessageData;
export import ICodeBase = ns_2.ICodeBase;
export import ICodeData = ns_2.ICodeData;
export import RoleType = ns_3.RoleType;
export import IPeopleBase = ns_3.IPeopleBase;
export import IPeopleData = ns_3.IPeopleData;
export import IInviteData = ns_3.IInviteData;
export import IKnowledgeBoxesBase = ns_5.IKnowledgeBoxesBase;
export import IKnowledgeBoxesData = ns_5.IKnowledgeBoxesData;
export import IProjectBase = ns_6.IProjectBase;
export import IProjectData = ns_6.IProjectData;
export import IAgentBase = ns_6.IAgentBase;
export import IAgentData = ns_6.IAgentData;
export import IApiKeyBase = ns_6.IApiKeyBase;
export import IApiKeyData = ns_6.IApiKeyData;
export import IPromptCategoryBase = ns_7.IPromptCategoryBase;
export import IPromptCategoryData = ns_7.IPromptCategoryData;
export import IIPEBase = ns_8.IIPEBase;
export import IIPEData = ns_8.IIPEData;
export import IPromptOptionData = ns_9.IPromptOptionData;
export import IPromptLanguageData = ns_9.IPromptLanguageData;
export import IPromptLanguage = ns_10.IPromptLanguage;
export import IPromptLiterals = ns_10.IPromptLiterals;
export import IPromptTemplateBase = ns_10.IPromptTemplateBase;
export import IPromptTemplateData = ns_10.IPromptTemplateData;
export import IPromptTemplateLanguageData = ns_10.IPromptTemplateLanguageData;
export import ISchemaBase = ns_11.ISchemaBase;
export import ISchemaData = ns_11.ISchemaData;
export import ISchemaLanguageBase = ns_11.ISchemaLanguageBase;
export import ISchemaLanguageData = ns_11.ISchemaLanguageData;
export import IUserBase = ns_12.IUserBase;
export import IUserData = ns_12.IUserData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };